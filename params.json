{"name":"Simplelist","tagline":"A user inputs an item into the text field, which is then added to the list on  clicking ‘Add’.","body":"### **Simple List Setup**\r\n\r\n**The source for the task is located inside: **\r\n\r\n\\SimpleList\\public\\js\r\n\r\n**Testing folder located inside:**\r\n\r\n\\SimpleList\\test\r\n\r\n**My server currently redirects to build folder for running built project as the node js:**\r\n\r\n\\SimpleList\\build \r\n\r\nSo if you would like to run the files yourselves keep that in mind.\r\nI usually wouldn't push up the build folder to the repository but for ease of running through it as an example I've included it for now.\r\n\r\n**I have included the server file I used for SimpleList as well inside:**\r\n\\SimpleList\\server\r\n\r\nTo keep things simple Ive not included any less/sass/grunt files that are usually in my build env\r\n\r\n**Source Files Included:**\r\n\r\n_Main.js_\r\nEntry module, required initially by requirejs\r\n\r\n_Model.js_\r\nFor the purpose of this task Im retrieving the values from local storage\r\nIm also only sending the values to local json storage \r\nwhen the page unloads at the moment in order to send and load the data once. \r\nIn most cases with and existing service for the model I'd likely load \r\nonce & send it instantly. This created dual scenarios where the model deals with real time\r\ndata such as new rows added during run time and the stored data seperately.\r\nTheres also a scenario of storing existing rows in the model, ultimately I would have tied this \r\nall to addItem/Remove Item.\r\n\r\n_IObserver.js_\r\nSudo JS Interface wrapper module that the view components \r\ninherit in order inherit update method called from the pattern.\r\n\r\n_SimpleListAddView.js_\r\nThis class creates & renders most of the view components\r\nI would normally use templates here for the view components time permitting, \r\nThere are also string values which should ultimately be stored in a model \r\nor constant variable. The two methods at the bottom should be swapped to getters instead.\r\n\r\n_SimpleListCountView.js_\r\nA binding example below appropriately binds the view & data together\r\nfor the change/update from the Observer pattern \r\n\r\n_SimpleRowView.js_\r\nThis is the view for a single row, consisting of li & Button HTML\r\nThe component has the ability to remove itself from its parent\r\n\r\n_App.js_\r\nModule implementing the Observer pattern Stores & Retrieves its data locally on the \r\nbrowser using JSON. Brings together all the view components, controllers & models in context \r\n& scope Adds new rows when the add text button is clicked I have used - Immediately invoked \r\nfunctions - throughout most of my code to reduce lookups I've also kept global namespace \r\npolution minimal. I've also tried to keep the js code as vanilla as possible. For the \r\npurpose of this task I'm referencing the count on the counter at the moment through an array \r\nin the model that talks to the local json object which I would refactor to be more streamline\r\nby storing row value html in the JSON to retrieve from the model on load.\r\n\r\nYou can view an online example at [View Example](http://www.appbroker.biz/SimpleList/build/index.html)\r\nPlease note that the online example targets chrome & firefox only.\r\n\r\nMany thanks\r\nRyan McLaughlin\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}